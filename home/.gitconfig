[user]
    name = Dmitry Sidorenko
    email = d.sidorenko@profee.com

[core]
	pager = /bin/less
	autocrlf = input

[color]
	diff = auto
	status = auto
	branch = auto
	interactive = auto
	ui = auto

[http]
    sslVerify = false

[push]
    default = tracking

[merge]
    renamelimit=5000
    summary = true

[diff]
    renamelimit = 2000
    tool = diffuse
	guitool = idea

[difftool]
    prompt = false

[difftool "idea"]
    cmd = /opt/idea/current/bin/idea.sh diff $(cd $(dirname "$LOCAL") && pwd)/$(basename "$LOCAL") $(cd $(dirname "$REMOTE") && pwd)/$(basename "$REMOTE")

[difftool "diffuse"]
    cmd = diffuse -w -D $LOCAL $REMOTE

[alias]
    co = checkout
    br = branch
    ci = commit
    st = status -sb
    unstage = reset HEAD --
    out = log origin..HEAD
    dev = checkout develop

    # various pretty loggers from various places
    lg = log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr)%Creset' --abbrev-commit --date=relative

    lc = log ORIG_HEAD.. --stat --no-merges

    # from https://git.wiki.kernel.org/index.php/Aliases
    whois = "!sh -c 'git log -i -1 --pretty=\"format:%an <%ae>\n\" --author=\"$1\"' -"
    whatis = show -s --pretty='tformat:%h (%s, %ad)' --date=short

    contributors = shortlog -sne

    # commits not pushed to $1
    unpushed = cherry -v

    # what tag contains the sha
    whatrelease = name-rev --name-only --ref=v_*

    # what branch contains the sha
    contains = branch --contains

    # what got pushed to master in the last hour
    #  based on http://stackoverflow.com/questions/3357219/expose-the-date-a-commit-was-pushed-to-a-repository
    justpushed = log origin/master@{\"1 hour ago\"}..origin/master --

    # log everything with $1 string in the diff
    timegrep = log -S

    # like above, but show the diff
    diffgrep = log -p -S

    # search logs for a bugzilla like number
    findbug = "!sh -c 'git log --grep ^$1:' -"

    # show what tag/release a bug was part of
    bugrelease = "!sh -c 'git name-rev --tags --name-only  $(git log --grep ^$1: --pretty=\"format:%H\n\")' -"

    # from https://gist.github.com/492227
    lost = !"git fsck | awk '/dangling commit/ {print $3}' | git show --format='SHA1: %C(yellow)%h%Creset %f' --stdin | awk '/SHA1/ {sub(\"SHA1: \", \"\"); print}'"

    # show a list of branches sorted by time of last commit
    brage = "!f() { git for-each-ref --sort=committerdate refs/heads $1  --format=\"%(refname:short)\" ; }; g() { for C in $(f $1) ; do git show -s --pretty=format:\"%Cgreen%ci %Cblue%cr%Creset  $C\" \"$C\" -- ; done; }; g "

    # show remote branches as well
    brageall = !git brage refs/remotes

    # show a list of tags sorted by when they were tagged
    tagage = "!sh -c 'git for-each-ref --sort=taggerdate refs/tags --format=\"%(refname:short)\"'"

    # show a list of every branch and show there latests commit, sorted by last commit
    brlog = "!sh -c 'for C in $(git for-each-ref --sort=committerdate refs/heads --format=\"%(refname:short)\") ; do git show -s --pretty=format:\"%Cgreen%ci %Cblue%cr%Creset  $C\" \"$C\" -- ; git show  -s $C ; echo; done'"

    # not useful itself, but handy to remember for use in scripts
    thisbranch = rev-parse --abbrev-ref HEAD

    # from https://github.com/cypher/dotfiles/blob/master/gitconfig
    ls-ignored = ls-files --exclude-standard --ignored --others

    # Список стори, которые замержены в девелоп, но отсутствуют в локальной ветке
    unmerged = !"git log --merges --oneline ..origin/develop | grep --only-matching --perl-regexp 'Merge pull request .* feature/\\K[A-Z]+-\\d{4}[\\w-]*'" | grep '[A-Z]+-\\d{4}'

